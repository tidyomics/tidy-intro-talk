[
  {
    "objectID": "tidy-intro-talk.html",
    "href": "tidy-intro-talk.html",
    "title": "Tidy Intro Talk",
    "section": "",
    "text": "An open, open-source project spanning multiple R packages, and developers from around the world. Organized as a GitHub organization with GitHub Projects. For more:\n\nhttps://github.com/tidyomics\nhttps://www.biorxiv.org/content/10.1101/2023.09.10.557072v2\ntidiness_in_bioc channel in Bioconductor Slack"
  },
  {
    "objectID": "tidy-intro-talk.html#avoid-common-bookkeeping-errors",
    "href": "tidy-intro-talk.html#avoid-common-bookkeeping-errors",
    "title": "Tidy Intro Talk",
    "section": "Avoid common bookkeeping errors",
    "text": "Avoid common bookkeeping errors\nReordering samples (columns) is a global operation:\n\nse2 &lt;- se[,c(1,3,2,4)]\nassay(se2, \"counts\")\n\n    s1  s3  s2  s4\ng1  94 112 117  94\ng2 111 103 104 112\ng3  83 104  87 108\ng4 101 101  82  99\n\ncolData(se2)\n\nDataFrame with 4 rows and 3 columns\n        sample   condition         sex\n   &lt;character&gt; &lt;character&gt; &lt;character&gt;\ns1          s1           x           m\ns3          s3           x           f\ns2          s2           y           m\ns4          s4           y           f\n\n\nAssignment that might result in sample swap results in an error:\n\nassay(se2) &lt;- counts\n# Error:\n# please use 'assay(x, withDimnames=FALSE)) &lt;- value' or \n# 'assays(x, withDimnames=FALSE)) &lt;- value'\n# when the rownames or colnames of the supplied assay(s) are not \n# identical to those of the receiving  SummarizedExperiment object 'x'\n\nOther such validity checks include comparison of genomic ranges across different genome builds: will result in an error."
  },
  {
    "objectID": "tidy-intro-talk.html#can-be-hard-for-new-users",
    "href": "tidy-intro-talk.html#can-be-hard-for-new-users",
    "title": "Tidy Intro Talk",
    "section": "Can be hard for new users",
    "text": "Can be hard for new users\n\nslotNames(se)\n\n[1] \"colData\"         \"assays\"          \"NAMES\"           \"elementMetadata\" \"metadata\"       \n\nmethods(class = class(se)) |&gt; head(10)\n\n [1] \"!=,ANY,Vector-method\"                                        \n [2] \"!=,Vector,ANY-method\"                                        \n [3] \"!=,Vector,Vector-method\"                                     \n [4] \"[,SummarizedExperiment,ANY,ANY,ANY-method\"                   \n [5] \"[[,SummarizedExperiment,ANY,missing-method\"                  \n [6] \"[[&lt;-,SummarizedExperiment,ANY,missing-method\"                \n [7] \"[&lt;-,SummarizedExperiment,ANY,ANY,SummarizedExperiment-method\"\n [8] \"[&lt;-,Vector,ANY,ANY,ANY-method\"                               \n [9] \"%in%,ANY,Vector-method\"                                      \n[10] \"%in%,Vector,ANY-method\""
  },
  {
    "objectID": "tidy-intro-talk.html#many-beginners-know-dplyrggplot2",
    "href": "tidy-intro-talk.html#many-beginners-know-dplyrggplot2",
    "title": "Tidy Intro Talk",
    "section": "Many beginners know dplyr/ggplot2",
    "text": "Many beginners know dplyr/ggplot2\n\nlibrary(dplyr)\n# filter to samples in condition 'x'\nsamples |&gt; \n  as_tibble() |&gt; \n  filter(condition == \"x\")\n\n# A tibble: 2 × 3\n  sample condition sex  \n  &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;\n1 s1     x         m    \n2 s3     x         f"
  },
  {
    "objectID": "tidy-intro-talk.html#enabling-dplyr-verbs-for-omics",
    "href": "tidy-intro-talk.html#enabling-dplyr-verbs-for-omics",
    "title": "Tidy Intro Talk",
    "section": "Enabling dplyr verbs for omics",
    "text": "Enabling dplyr verbs for omics\n\nlibrary(tidySummarizedExperiment)\nse\n\n# A SummarizedExperiment-tibble abstraction: 16 × 8\n# Features=4 | Samples=4 | Assays=counts\n   .feature .sample counts sample condition sex   id    symbol\n   &lt;chr&gt;    &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; \n 1 g1       s1          94 s1     x         m     g1    ABC   \n 2 g2       s1         111 s1     x         m     g2    DEF   \n 3 g3       s1          83 s1     x         m     g3    GHI   \n 4 g4       s1         101 s1     x         m     g4    JKL   \n 5 g1       s2         117 s2     y         m     g1    ABC   \n 6 g2       s2         104 s2     y         m     g2    DEF   \n 7 g3       s2          87 s2     y         m     g3    GHI   \n 8 g4       s2          82 s2     y         m     g4    JKL   \n 9 g1       s3         112 s3     x         f     g1    ABC   \n10 g2       s3         103 s3     x         f     g2    DEF   \n11 g3       s3         104 s3     x         f     g3    GHI   \n12 g4       s3         101 s3     x         f     g4    JKL   \n13 g1       s4          94 s4     y         f     g1    ABC   \n14 g2       s4         112 s4     y         f     g2    DEF   \n15 g3       s4         108 s4     y         f     g3    GHI   \n16 g4       s4          99 s4     y         f     g4    JKL   \n\n\nWhat does this mean “SE-tibble abstraction”?\nEssentially this is an API, we can use our familiar verbs and interact with the native object."
  },
  {
    "objectID": "tidy-intro-talk.html#still-a-standard-bioc-object",
    "href": "tidy-intro-talk.html#still-a-standard-bioc-object",
    "title": "Tidy Intro Talk",
    "section": "Still a standard Bioc object",
    "text": "Still a standard Bioc object\n\nclass(se)\n\n[1] \"SummarizedExperiment\"\nattr(,\"package\")\n[1] \"SummarizedExperiment\"\n\ndim(se)\n\n[1] 4 4"
  },
  {
    "objectID": "tidy-intro-talk.html#we-can-use-familiar-dplyr-verbs",
    "href": "tidy-intro-talk.html#we-can-use-familiar-dplyr-verbs",
    "title": "Tidy Intro Talk",
    "section": "We can use familiar dplyr verbs",
    "text": "We can use familiar dplyr verbs\n\nse |&gt; \n  filter(condition == \"x\")\n\n# A SummarizedExperiment-tibble abstraction: 8 × 8\n# Features=4 | Samples=2 | Assays=counts\n  .feature .sample counts sample condition sex   id    symbol\n  &lt;chr&gt;    &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; \n1 g1       s1          94 s1     x         m     g1    ABC   \n2 g2       s1         111 s1     x         m     g2    DEF   \n3 g3       s1          83 s1     x         m     g3    GHI   \n4 g4       s1         101 s1     x         m     g4    JKL   \n5 g1       s3         112 s3     x         f     g1    ABC   \n6 g2       s3         103 s3     x         f     g2    DEF   \n7 g3       s3         104 s3     x         f     g3    GHI   \n8 g4       s3         101 s3     x         f     g4    JKL   \n\n\n\nse_sub &lt;- se |&gt; \n  filter(condition == \"x\")\ncolData(se_sub)\n\nDataFrame with 2 rows and 3 columns\n        sample   condition         sex\n   &lt;character&gt; &lt;character&gt; &lt;character&gt;\ns1          s1           x           m\ns3          s3           x           f"
  },
  {
    "objectID": "tidy-intro-talk.html#works-with-seurat-and-sce",
    "href": "tidy-intro-talk.html#works-with-seurat-and-sce",
    "title": "Tidy Intro Talk",
    "section": "Works with Seurat and SCE",
    "text": "Works with Seurat and SCE\nSingleCellExperiment = SummarizedExperiment with extra bells and whistles for single cells. E.g. slots for reduced dimensions.\n\nlibrary(tidySingleCellExperiment)\nlibrary(scales)\n# data from tidyomics/tidyomicsWorkshopBioc2023\nsce &lt;- readRDS(\"data/tidyomicsWorkshopSCE.rds\")\n# SCE is slightly different than SE, more cell focused\nsce |&gt;\n  filter(Phase == \"G1\") |&gt;\n  ggplot(aes(UMAP_1, UMAP_2, color=nCount_RNA)) +\n  geom_point() + \n  scale_color_gradient2(trans=\"log10\")"
  },
  {
    "objectID": "tidy-intro-talk.html#genomic-overlap-as-a-join",
    "href": "tidy-intro-talk.html#genomic-overlap-as-a-join",
    "title": "Tidy Intro Talk",
    "section": "Genomic overlap as a join",
    "text": "Genomic overlap as a join\n\nlibrary(plyranges)\nx\n\nGRanges object with 40 ranges and 1 metadata column:\n       seqnames    ranges strand |     score\n          &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;numeric&gt;\n   [1]        1   114-115      * |   4.88780\n   [2]        1   129-130      * |   4.40817\n   [3]        1   154-155      * |   5.18773\n   [4]        1   195-196      * |   5.81901\n   [5]        1   200-201      * |   4.14720\n   ...      ...       ...    ... .       ...\n  [36]        1   898-899      * |   6.55006\n  [37]        1   922-923      * |   6.46796\n  [38]        1   956-957      * |   4.93079\n  [39]        1   957-958      * |   4.34292\n  [40]        1   966-967      * |   4.53976\n  -------\n  seqinfo: 1 sequence from an unspecified genome\n\ny\n\nGRanges object with 3 ranges and 1 metadata column:\n      seqnames    ranges strand |          id\n         &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;character&gt;\n  [1]        1   101-300      * |           a\n  [2]        1   451-650      * |           b\n  [3]        1  801-1000      * |           c\n  -------\n  seqinfo: 1 sequence from an unspecified genome; no seqlengths\n\n\n\n\nx |&gt; join_overlap_inner(y)\n\nGRanges object with 30 ranges and 2 metadata columns:\n       seqnames    ranges strand |     score          id\n          &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;numeric&gt; &lt;character&gt;\n   [1]        1   114-115      * |   4.88780           a\n   [2]        1   129-130      * |   4.40817           a\n   [3]        1   154-155      * |   5.18773           a\n   [4]        1   195-196      * |   5.81901           a\n   [5]        1   200-201      * |   4.14720           a\n   ...      ...       ...    ... .       ...         ...\n  [26]        1   898-899      * |   6.55006           c\n  [27]        1   922-923      * |   6.46796           c\n  [28]        1   956-957      * |   4.93079           c\n  [29]        1   957-958      * |   4.34292           c\n  [30]        1   966-967      * |   4.53976           c\n  -------\n  seqinfo: 1 sequence from an unspecified genome\n\n\nMany options, directed, within, maxgap, minoverlap, etc.\n\n# chaining operations\nx |&gt;\n  filter(score &gt; 3.5) |&gt;\n  join_overlap_inner(y) |&gt;\n  group_by(id) |&gt;\n  summarize(ave_score = mean(score), n = n())\n\nDataFrame with 3 rows and 3 columns\n           id ave_score         n\n  &lt;character&gt; &lt;numeric&gt; &lt;integer&gt;\n1           a   5.00465        10\n2           b   5.43353        11\n3           c   5.45538         7\n\n\n\n# pipe to plot\nx |&gt;\n  filter(score &gt; 3.5) |&gt;\n  join_overlap_inner(y) |&gt;\n  as_tibble() |&gt;\n  ggplot(aes(x = id, y = score)) + \n  geom_violin() + geom_jitter(width=.1)\n\n\n\n\n\n# many convenience functions\ny |&gt; \n  anchor_5p() |&gt; # 5', 3', start, end, center\n  mutate(width=2) |&gt;\n  join_nearest(x, distance=TRUE)\n\nGRanges object with 3 ranges and 3 metadata columns:\n      seqnames    ranges strand |          id     score  distance\n         &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;character&gt; &lt;numeric&gt; &lt;integer&gt;\n  [1]        1   101-102      * |           a   4.88780        11\n  [2]        1   451-452      * |           b   3.99047         1\n  [3]        1   801-802      * |           c   6.49877        21\n  -------\n  seqinfo: 1 sequence from an unspecified genome; no seqlengths"
  },
  {
    "objectID": "tidy-intro-talk.html#nullranges",
    "href": "tidy-intro-talk.html#nullranges",
    "title": "Tidy Intro Talk",
    "section": "nullranges",
    "text": "nullranges\nWe developed a package nullranges, as a modular tool to assist with making genomic comparisons. It doesn’t do enrichment analysis but provides null genomic range sets for investigating various hypotheses."
  },
  {
    "objectID": "tidy-intro-talk.html#bootstrapping-ranges",
    "href": "tidy-intro-talk.html#bootstrapping-ranges",
    "title": "Tidy Intro Talk",
    "section": "Bootstrapping ranges",
    "text": "Bootstrapping ranges\nStatistical papers from the ENCODE project noted that block bootstrapping genomic data preserves important spatial patterns (Bickel et al. 2010).\n\n\nlibrary(nullranges)\nboot &lt;- bootRanges(x, blockLength=10, R=20)\n# keep track of bootstrap iteration, gives boot dist'n\nboot |&gt;\n  join_overlap_inner(y) |&gt;\n  group_by(iter, id) |&gt;\n  summarize(n_overlaps = n())\n\nDataFrame with 60 rows and 3 columns\n     iter          id n_overlaps\n    &lt;Rle&gt; &lt;character&gt;  &lt;integer&gt;\n1       1           a          4\n2       1           b         10\n3       1           c          4\n4       2           a         11\n5       2           b         10\n...   ...         ...        ...\n56     19           b         18\n57     19           c         11\n58     20           a         10\n59     20           b         15\n60     20           c          8\n\n\n\nboot |&gt;\n  join_overlap_inner(y) |&gt;\n  group_by(iter, id) |&gt;\n  summarize(n_overlaps = n()) |&gt;\n  as_tibble() |&gt;\n  ggplot(aes(x = id, y = n_overlaps)) + \n  geom_boxplot()"
  },
  {
    "objectID": "tidy-intro-talk.html#matching-ranges",
    "href": "tidy-intro-talk.html#matching-ranges",
    "title": "Tidy Intro Talk",
    "section": "Matching ranges",
    "text": "Matching ranges\nMatching on covariates from a large pool allows for more focused hypothesis testing.\n\n\nxprime &lt;- x |&gt;\n  filter(score &gt; 5) |&gt;\n  mutate(score = rnorm(n(), mean = score, sd = .5))\nm &lt;- matchRanges(focal = xprime, pool = x, covar = ~score)\nplotCovariate(m)\n\n\n\n\n\ncombined &lt;- bind_ranges(\n  focal = xprime,\n  matching = matched(m),\n  pool = x,\n  .id = \"origin\"\n)\ncombined\n\nGRanges object with 82 ranges and 2 metadata columns:\n       seqnames    ranges strand |     score origin\n          &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;numeric&gt;  &lt;Rle&gt;\n   [1]        1   154-155      * |   5.91030  focal\n   [2]        1   195-196      * |   6.95693  focal\n   [3]        1   280-281      * |   6.62346  focal\n   [4]        1   282-283      * |   5.20914  focal\n   [5]        1   303-304      * |   7.47406  focal\n   ...      ...       ...    ... .       ...    ...\n  [78]        1   898-899      * |   6.55006   pool\n  [79]        1   922-923      * |   6.46796   pool\n  [80]        1   956-957      * |   4.93079   pool\n  [81]        1   957-958      * |   4.34292   pool\n  [82]        1   966-967      * |   4.53976   pool\n  -------\n  seqinfo: 1 sequence from an unspecified genome\n\n# now use the different sets for computation:\ncombined |&gt; \n  join_overlap_inner(y) |&gt;\n  group_by(id, origin) |&gt;\n  summarize(ave_score = mean(score))\n\nDataFrame with 9 rows and 3 columns\n           id   origin ave_score\n  &lt;character&gt;    &lt;Rle&gt; &lt;numeric&gt;\n1           a    focal   6.17495\n2           a matching   5.54412\n3           a     pool   5.00465\n4           b    focal   5.79665\n5           b matching   6.07625\n6           b     pool   5.25055\n7           c    focal   6.32536\n8           c matching   5.82463\n9           c     pool   5.14840\n\n\n\ncombined |&gt; \n  join_overlap_inner(y) |&gt;\n  group_by(id, origin) |&gt;\n  summarize(ave_score = mean(score), sd = sd(score)) |&gt;\n  as_tibble() |&gt;\n  ggplot(aes(origin, ave_score, \n             ymin=ave_score-2*sd, ymax=ave_score+2*sd)) + \n  geom_pointrange() +\n  facet_wrap(~id, labeller = label_both)\n\n\n\n\nThese are published as Application Notes:\n\nbootRanges\nmatchRanges"
  },
  {
    "objectID": "tidy-intro-talk.html#what-has-been-implemented",
    "href": "tidy-intro-talk.html#what-has-been-implemented",
    "title": "Tidy Intro Talk",
    "section": "What has been implemented",
    "text": "What has been implemented\n\nMatrix-shaped objects (SE, SCE)\nRanges\nInteractions\nCytometry\nSpatial\nmore to come…"
  },
  {
    "objectID": "tidy-intro-talk.html#limitations",
    "href": "tidy-intro-talk.html#limitations",
    "title": "Tidy Intro Talk",
    "section": "Limitations",
    "text": "Limitations\n\npackage code and non-standard evaluation\noptimized code, e.g. matrix operations"
  },
  {
    "objectID": "tidy-intro-talk.html#how-to-contribute",
    "href": "tidy-intro-talk.html#how-to-contribute",
    "title": "Tidy Intro Talk",
    "section": "How to contribute",
    "text": "How to contribute\n\nhttps://github.com/tidyomics, read docs, see open challenges\nMotivation: https://www.biorxiv.org/content/10.1101/2023.09.10.557072v2\ntidiness_in_bioc channel in Bioconductor Slack"
  },
  {
    "objectID": "tidy-intro-talk.html#outro",
    "href": "tidy-intro-talk.html#outro",
    "title": "Tidy Intro Talk",
    "section": "Outro",
    "text": "Outro\nRecommend genomic data analysts are always checking:\n\nmain contributions to variance (e.g. PCA, see plotPCA for bulk and OSCA for sc)\ncolumn and row densities (tidySE allows directly plotting geom_density of rows/columns, or geom_violin)\nknown positive features, feature-level plots (filter to feature, pipe to geom_point etc.)\n\nIf you’re interested in more complicated use cases of tidyomics see this online book:\n\nTidy ranges tutorial"
  },
  {
    "objectID": "tidy-intro-talk.html#contributors",
    "href": "tidy-intro-talk.html#contributors",
    "title": "Tidy Intro Talk",
    "section": "Contributors",
    "text": "Contributors\n\nStefano Mangiola (tidyomics leadership, tidy expression, single cell, spatial)\nJustin Landis (plyxp)\nEric Davis, Wancen Mu, Doug Phanstiel (nullranges)\nStuart Lee, Michael Lawrence, Di Cook (plyranges)\n\nAnd tidyomics developers: William Hutchison, Timothy Keyes, Helena Crowell, Jacques Serizay, Charlotte Soneson, Eric Davis, Noriaki Sato, Lambda Moses, Boyd Tarlinton, Abdullah Nahid, Miha Kosmac, Quentin Clayssen, Victor Yuan, Wancen Mu, Ji-Eun Park, Izabela Mamede, Min Hyung Ryu, Pierre-Paul Axisa, Paulina Paiz, Chi-Lam Poon, Ming Tang"
  },
  {
    "objectID": "tidy-intro-talk.html#funding",
    "href": "tidy-intro-talk.html#funding",
    "title": "Tidy Intro Talk",
    "section": "Funding",
    "text": "Funding\ntidyomics project funded by an Essential Open Source Software award from CZI and Wellcome Trust"
  }
]