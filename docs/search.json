[
  {
    "objectID": "tidy-intro-talk.html",
    "href": "tidy-intro-talk.html",
    "title": "Tidy Intro Talk",
    "section": "",
    "text": "An open, open-source project spanning multiple R packages, and developers from around the world. Organized as a GitHub organization with GitHub Projects. For more:\n\nhttps://github.com/tidyomics\nhttps://www.biorxiv.org/content/10.1101/2023.09.10.557072v2\ntidiness_in_bioc channel in Bioconductor Slack"
  },
  {
    "objectID": "tidy-intro-talk.html#tidyomics-project",
    "href": "tidy-intro-talk.html#tidyomics-project",
    "title": "Tidy Intro Talk",
    "section": "",
    "text": "An open, open-source project spanning multiple R packages, and developers from around the world. Organized as a GitHub organization with GitHub Projects. For more:\n\nhttps://github.com/tidyomics\nhttps://www.biorxiv.org/content/10.1101/2023.09.10.557072v2\ntidiness_in_bioc channel in Bioconductor Slack"
  },
  {
    "objectID": "tidy-intro-talk.html#diagram-of-tidyomics-workflows",
    "href": "tidy-intro-talk.html#diagram-of-tidyomics-workflows",
    "title": "Tidy Intro Talk",
    "section": "Diagram of tidyomics workflows",
    "text": "Diagram of tidyomics workflows"
  },
  {
    "objectID": "tidy-intro-talk.html#international-development-team",
    "href": "tidy-intro-talk.html#international-development-team",
    "title": "Tidy Intro Talk",
    "section": "International development team",
    "text": "International development team"
  },
  {
    "objectID": "tidy-intro-talk.html#objects-keep-data-organized",
    "href": "tidy-intro-talk.html#objects-keep-data-organized",
    "title": "Tidy Intro Talk",
    "section": "Objects keep data organized",
    "text": "Objects keep data organized\n\nWe typically have more information than just a matrix\nRow and column information (on features and samples)\nMetadata on organism, genome build, annotation release, etc.\nKeeping this information altogether is the motivation for data objects\nMany functions in Bioconductor are endomorphic meaning that an object is passed in, some data may be added/modified, then the object is passed back out\n\nI will first introduce one of the main data objects in Bioconductor, the SummarizedExperiment.\nAfter introducing this, I’ll motivate tidyomics as applied to Bioconductor objects.\nA SummarizedExperiment is built from three tables:\n\nlibrary(SummarizedExperiment)\n# metadata about genes\ngenes &lt;- DataFrame(\n  id = c(\"g1\",\"g2\",\"g3\",\"g4\"), \n  symbol = c(\"ABC\",\"DEF\",\"GHI\",\"JKL\")\n  )\ngenes\n\nDataFrame with 4 rows and 2 columns\n           id      symbol\n  &lt;character&gt; &lt;character&gt;\n1          g1         ABC\n2          g2         DEF\n3          g3         GHI\n4          g4         JKL\n\n\n\n# metadata about samples\nsamples &lt;- DataFrame(\n  sample = c(\"s1\",\"s2\",\"s3\",\"s4\"),\n  condition = c(\"x\",\"y\",\"x\",\"y\"),\n  sex = c(\"m\",\"m\",\"f\",\"f\")\n  )\nsamples\n\nDataFrame with 4 rows and 3 columns\n       sample   condition         sex\n  &lt;character&gt; &lt;character&gt; &lt;character&gt;\n1          s1           x           m\n2          s2           y           m\n3          s3           x           f\n4          s4           y           f\n\n\n\nset.seed(123) # some random count data\ncounts &lt;- matrix(rpois(16, lambda=100), ncol=4)\nrownames(counts) &lt;- genes$id\ncolnames(counts) &lt;- samples$sample\ncounts\n\n    s1  s2  s3  s4\ng1  94 117 112  94\ng2 111 104 103 112\ng3  83  87 104 108\ng4 101  82 101  99\n\n\n\nse &lt;- SummarizedExperiment(\n  assays = list(counts = counts),\n  rowData = genes, \n  colData = samples,\n  metadata = list(organism=\"Hsapiens\")\n  )\nse\n\nclass: SummarizedExperiment \ndim: 4 4 \nmetadata(1): organism\nassays(1): counts\nrownames(4): g1 g2 g3 g4\nrowData names(2): id symbol\ncolnames(4): s1 s2 s3 s4\ncolData names(3): sample condition sex"
  },
  {
    "objectID": "tidy-intro-talk.html#avoid-common-bookkeeping-errors",
    "href": "tidy-intro-talk.html#avoid-common-bookkeeping-errors",
    "title": "Tidy Intro Talk",
    "section": "Avoid common bookkeeping errors",
    "text": "Avoid common bookkeeping errors\nReordering samples (columns) is a global operation:\n\nse2 &lt;- se[,c(1,3,2,4)]\nassay(se2, \"counts\")\n\n    s1  s3  s2  s4\ng1  94 112 117  94\ng2 111 103 104 112\ng3  83 104  87 108\ng4 101 101  82  99\n\ncolData(se2)\n\nDataFrame with 4 rows and 3 columns\n        sample   condition         sex\n   &lt;character&gt; &lt;character&gt; &lt;character&gt;\ns1          s1           x           m\ns3          s3           x           f\ns2          s2           y           m\ns4          s4           y           f\n\n\nAssignment that might result in sample swap results in an error:\n\nassay(se2) &lt;- counts\n# Error:\n# please use 'assay(x, withDimnames=FALSE)) &lt;- value' or \n# 'assays(x, withDimnames=FALSE)) &lt;- value'\n# when the rownames or colnames of the supplied assay(s) are not \n# identical to those of the receiving  SummarizedExperiment object 'x'\n\nOther such validity checks include comparison of genomic ranges across different genome builds: will result in an error."
  },
  {
    "objectID": "tidy-intro-talk.html#can-be-hard-for-new-users",
    "href": "tidy-intro-talk.html#can-be-hard-for-new-users",
    "title": "Tidy Intro Talk",
    "section": "Can be hard for new users",
    "text": "Can be hard for new users\n\nslotNames(se)\n\n[1] \"colData\"         \"assays\"          \"NAMES\"           \"elementMetadata\" \"metadata\"       \n\nmethods(class = class(se))\n\n  [1] !=                    [                     [[                    [[&lt;-                 \n  [5] [&lt;-                   %in%                  &lt;                     &lt;=                   \n  [9] ==                    &gt;                     &gt;=                    $                    \n [13] $&lt;-                   aggregate             anyDuplicated         anyNA                \n [17] append                as.character          as.complex            as.data.frame        \n [21] as.env                as.integer            as.list               as.logical           \n [25] as.matrix             as.numeric            as.raw                assay                \n [29] assay&lt;-               assayNames            assayNames&lt;-          assays               \n [33] assays&lt;-              bindROWS              by                    c                    \n [37] cbind                 coerce                coerce&lt;-              colData              \n [41] colData&lt;-             colnames              combineCols           combineRows          \n [45] countOverlaps         dim                   dimnames              dimnames&lt;-           \n [49] duplicated            elementMetadata       elementMetadata&lt;-     eval                 \n [53] expand                expand.grid           extractROWS           FactorToClass        \n [57] findOverlaps          head                  horizontal_slot_names intersect            \n [61] is.na                 length                lengths               match                \n [65] mcols                 mcols&lt;-               merge                 mergeROWS            \n [69] metadata              metadata&lt;-            mstack                names                \n [73] names&lt;-               ncol                  nrow                  overlapsAny          \n [77] parallel_slot_names   rank                  rbind                 realize              \n [81] relist                rename                rep                   rep.int              \n [85] replaceROWS           rev                   rowData               rowData&lt;-            \n [89] ROWNAMES              rownames              ROWNAMES&lt;-            rowRanges            \n [93] rowRanges&lt;-           selfmatch             seqlevelsInUse        setdiff              \n [97] setequal              shiftApply            show                  showAsCell           \n[101] sort                  split                 split&lt;-               subset               \n[105] subsetByOverlaps      summary               table                 tail                 \n[109] tapply                transform             union                 unique               \n[113] updateObject          values                values&lt;-              vertical_slot_names  \n[117] window                window&lt;-              with                  xtabs                \n[121] xtfrm                \nsee '?methods' for accessing help and source code"
  },
  {
    "objectID": "tidy-intro-talk.html#many-beginners-know-dplyrggplot2",
    "href": "tidy-intro-talk.html#many-beginners-know-dplyrggplot2",
    "title": "Tidy Intro Talk",
    "section": "Many beginners know dplyr/ggplot2",
    "text": "Many beginners know dplyr/ggplot2\n\nlibrary(dplyr)\n# filter to samples in condition 'x'\nsamples |&gt; \n  as_tibble() |&gt; \n  filter(condition == \"x\")\n\n# A tibble: 2 × 3\n  sample condition sex  \n  &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt;\n1 s1     x         m    \n2 s3     x         f"
  },
  {
    "objectID": "tidy-intro-talk.html#enabling-dplyr-verbs-for-omics",
    "href": "tidy-intro-talk.html#enabling-dplyr-verbs-for-omics",
    "title": "Tidy Intro Talk",
    "section": "Enabling dplyr verbs for omics",
    "text": "Enabling dplyr verbs for omics\n\nlibrary(tidySummarizedExperiment)\nse\n\n# A SummarizedExperiment-tibble abstraction: 16 × 8\n# Features=4 | Samples=4 | Assays=counts\n   .feature .sample counts sample condition sex   id    symbol\n   &lt;chr&gt;    &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; \n 1 g1       s1          94 s1     x         m     g1    ABC   \n 2 g2       s1         111 s1     x         m     g2    DEF   \n 3 g3       s1          83 s1     x         m     g3    GHI   \n 4 g4       s1         101 s1     x         m     g4    JKL   \n 5 g1       s2         117 s2     y         m     g1    ABC   \n 6 g2       s2         104 s2     y         m     g2    DEF   \n 7 g3       s2          87 s2     y         m     g3    GHI   \n 8 g4       s2          82 s2     y         m     g4    JKL   \n 9 g1       s3         112 s3     x         f     g1    ABC   \n10 g2       s3         103 s3     x         f     g2    DEF   \n11 g3       s3         104 s3     x         f     g3    GHI   \n12 g4       s3         101 s3     x         f     g4    JKL   \n13 g1       s4          94 s4     y         f     g1    ABC   \n14 g2       s4         112 s4     y         f     g2    DEF   \n15 g3       s4         108 s4     y         f     g3    GHI   \n16 g4       s4          99 s4     y         f     g4    JKL   \n\n\nWhat does this mean “SE-tibble abstraction”?\nEssentially this is an API, we can use our familiar verbs and interact with the native object."
  },
  {
    "objectID": "tidy-intro-talk.html#still-a-standard-bioc-object",
    "href": "tidy-intro-talk.html#still-a-standard-bioc-object",
    "title": "Tidy Intro Talk",
    "section": "Still a standard Bioc object",
    "text": "Still a standard Bioc object\n\nclass(se)\n\n[1] \"SummarizedExperiment\"\nattr(,\"package\")\n[1] \"SummarizedExperiment\"\n\ndim(se)\n\n[1] 4 4"
  },
  {
    "objectID": "tidy-intro-talk.html#we-can-use-familiar-dplyr-verbs",
    "href": "tidy-intro-talk.html#we-can-use-familiar-dplyr-verbs",
    "title": "Tidy Intro Talk",
    "section": "We can use familiar dplyr verbs",
    "text": "We can use familiar dplyr verbs\n\nse |&gt; \n  filter(condition == \"x\")\n\n# A SummarizedExperiment-tibble abstraction: 8 × 8\n# Features=4 | Samples=2 | Assays=counts\n  .feature .sample counts sample condition sex   id    symbol\n  &lt;chr&gt;    &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; \n1 g1       s1          94 s1     x         m     g1    ABC   \n2 g2       s1         111 s1     x         m     g2    DEF   \n3 g3       s1          83 s1     x         m     g3    GHI   \n4 g4       s1         101 s1     x         m     g4    JKL   \n5 g1       s3         112 s3     x         f     g1    ABC   \n6 g2       s3         103 s3     x         f     g2    DEF   \n7 g3       s3         104 s3     x         f     g3    GHI   \n8 g4       s3         101 s3     x         f     g4    JKL   \n\n\n\nse_sub &lt;- se |&gt; \n  filter(condition == \"x\")\ncolData(se_sub)\n\nDataFrame with 2 rows and 3 columns\n        sample   condition         sex\n   &lt;character&gt; &lt;character&gt; &lt;character&gt;\ns1          s1           x           m\ns3          s3           x           f"
  },
  {
    "objectID": "tidy-intro-talk.html#facilitates-quick-exploration",
    "href": "tidy-intro-talk.html#facilitates-quick-exploration",
    "title": "Tidy Intro Talk",
    "section": "Facilitates quick exploration",
    "text": "Facilitates quick exploration\n\nlibrary(ggplot2)\nse |&gt; \n  filter(.feature %in% c(\"g1\",\"g2\")) |&gt; \n  ggplot(aes(condition, counts, color=sex, group=sex)) + \n  geom_point(size=2) + \n  geom_line() +\n  facet_wrap(~.feature) +\n  ylim(0,200)\n\n\n\n\n\n# suppose we had gene groups\nrowData(se)$gene_group &lt;- c(1,1,2,2)\nse |&gt; \n  group_by(gene_group, condition, sex) |&gt; \n  summarize(ave_count = mean(counts), sd_count = sd(counts)) |&gt; \n  ggplot(aes(condition, ave_count, \n             ymin=ave_count - 2*sd_count, \n             ymax=ave_count + 2*sd_count,\n             color=sex, group=sex)) + \n  geom_pointrange(position = position_dodge(width = .25)) + \n  facet_wrap(~gene_group, labeller = \"label_both\") +\n  ylim(0,200)\n\ntidySummarizedExperiment says: A data frame is returned for independent data analysis.\n\n\n\n\n\nWe can mutate assay data, row data, or column data by modifying existing columns. If we want to add new data to rows or columns, e.g. row summaries, a fast way to do this is mutate_features (or mutate_samples for columns). These convenience functions are added in the devel branch in Summer 2024, and available with install_github.\n\nse %&gt;%\n  mutate_features(row_vars = rowVars(assay(.))) |&gt;\n  filter(row_vars &gt; 100)\n\n# A SummarizedExperiment-tibble abstraction: 8 × 10\n# Features=2 | Samples=4 | Assays=counts\n  .feature .sample counts sample condition sex   id    symbol gene_group row_vars\n  &lt;chr&gt;    &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;       &lt;dbl&gt;    &lt;dbl&gt;\n1 g1       s1          94 s1     x         m     g1    ABC             1     144.\n2 g3       s1          83 s1     x         m     g3    GHI             2     152.\n3 g1       s2         117 s2     y         m     g1    ABC             1     144.\n4 g3       s2          87 s2     y         m     g3    GHI             2     152.\n5 g1       s3         112 s3     x         f     g1    ABC             1     144.\n6 g3       s3         104 s3     x         f     g3    GHI             2     152.\n7 g1       s4          94 s4     y         f     g1    ABC             1     144.\n8 g3       s4         108 s4     y         f     g3    GHI             2     152."
  },
  {
    "objectID": "tidy-intro-talk.html#also-works-with-seurat-and-sce",
    "href": "tidy-intro-talk.html#also-works-with-seurat-and-sce",
    "title": "Tidy Intro Talk",
    "section": "Also works with Seurat and SCE",
    "text": "Also works with Seurat and SCE\nSingleCellExperiment = SummarizedExperiment with extra bells and whistles for single cells. E.g. slots for reduced dimensions.\n\nlibrary(tidySingleCellExperiment)\nlibrary(scales)\n# data from tidyomics/tidyomicsWorkshopBioc2023\nsce &lt;- readRDS(\"data/tidyomicsWorkshopSCE.rds\")\n# SCE is slightly different than SE, more cell focused\nsce |&gt;\n  filter(Phase == \"G1\") |&gt;\n  ggplot(aes(UMAP_1, UMAP_2, color=nCount_RNA)) +\n  geom_point() + \n  scale_color_gradient2(trans=\"log10\")\n\n\n\n\n\n# can include and compute on gene expression values\nsce |&gt;\n  join_features(c(\"CD3D\",\"TRDC\"), shape=\"wide\") |&gt;\n  select(.cell, CD3D, TRDC)\n\n# A SingleCellExperiment-tibble abstraction: 3,580 × 5\n# \u001b[90mFeatures=482 | Cells=3580 | Assays=counts, logcounts\u001b[0m\n   .cell                 CD3D  TRDC UMAP_1 UMAP_2\n   &lt;chr&gt;                &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 1_AAATGGACAAGTTCGT-1 1.39   1.10 -3.73  -1.59 \n 2 1_AACAAGAGTGTTGAGG-1 0      0     0.798 -0.151\n 3 1_AACGTCAGTCTATGAC-1 1.10   0    -0.292  0.515\n 4 1_AACTTCTCACGCTGAC-1 1.10   0     0.372  2.34 \n 5 1_AAGTCGTGTGTTGCCG-1 0      0    -1.63  -0.236\n 6 1_AATGAAGCATCCAACA-1 0      0     0.822  2.90 \n 7 1_ACAAAGAGTCGTACTA-1 0.693  0     3.28   3.97 \n 8 1_ACACGCGCAGGTACGA-1 1.10   0    -3.65  -0.192\n 9 1_ACATGCATCACTTTGT-1 0      0    -0.273  4.09 \n10 1_ACGATCATCGACGAGA-1 0.693  1.10 -0.816  2.90 \n# ℹ 3,570 more rows\n\n\n\n# process the sample ID from the filename\nsce &lt;- sce |&gt;\n  extract(file, \"sample\", \"../data/.*/([a-zA-Z0-9_-]+)/outs.+\")\nsce |&gt;\n  select(sample)\n\ntidySingleCellExperiment says: Key columns are missing. A data frame is returned for independent data analysis.\n\n\n# A tibble: 3,580 × 1\n   sample  \n   &lt;chr&gt;   \n 1 SI-GA-H1\n 2 SI-GA-H1\n 3 SI-GA-H1\n 4 SI-GA-H1\n 5 SI-GA-H1\n 6 SI-GA-H1\n 7 SI-GA-H1\n 8 SI-GA-H1\n 9 SI-GA-H1\n10 SI-GA-H1\n# ℹ 3,570 more rows\n\n# aggregate across sample = pseudobulking, returns SE\nsce |&gt;\n  aggregate_cells(sample)\n\n# A SummarizedExperiment-tibble abstraction: 4,820 × 9\n# Features=482 | Samples=10 | Assays=counts, logcounts\n   .feature   .sample  counts logcounts .aggregated_cells sample   batch BCB    treatment\n   &lt;chr&gt;      &lt;chr&gt;     &lt;dbl&gt;     &lt;dbl&gt;             &lt;int&gt; &lt;chr&gt;    &lt;fct&gt; &lt;fct&gt;  &lt;chr&gt;    \n 1 ABCC3      SI-GA-E5      0     0                   238 SI-GA-E5 2     BCB097 treated  \n 2 AC004585.1 SI-GA-E5      6     4.16                238 SI-GA-E5 2     BCB097 treated  \n 3 AC005480.1 SI-GA-E5      0     0                   238 SI-GA-E5 2     BCB097 treated  \n 4 AC007952.4 SI-GA-E5     11     7.62                238 SI-GA-E5 2     BCB097 treated  \n 5 AC012615.2 SI-GA-E5      0     0                   238 SI-GA-E5 2     BCB097 treated  \n 6 AC020656.1 SI-GA-E5      0     0                   238 SI-GA-E5 2     BCB097 treated  \n 7 AC021739.4 SI-GA-E5      0     0                   238 SI-GA-E5 2     BCB097 treated  \n 8 AC026979.2 SI-GA-E5      8     5.55                238 SI-GA-E5 2     BCB097 treated  \n 9 AC046158.1 SI-GA-E5      0     0                   238 SI-GA-E5 2     BCB097 treated  \n10 AC055713.1 SI-GA-E5      1     0.693               238 SI-GA-E5 2     BCB097 treated  \n# ℹ 40 more rows"
  },
  {
    "objectID": "tidy-intro-talk.html#genomic-overlap-as-a-join",
    "href": "tidy-intro-talk.html#genomic-overlap-as-a-join",
    "title": "Tidy Intro Talk",
    "section": "Genomic overlap as a join",
    "text": "Genomic overlap as a join\n\nlibrary(plyranges)\nx\n\nGRanges object with 40 ranges and 1 metadata column:\n       seqnames    ranges strand |     score\n          &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;numeric&gt;\n   [1]        1   114-115      * |   4.88780\n   [2]        1   129-130      * |   4.40817\n   [3]        1   154-155      * |   5.18773\n   [4]        1   195-196      * |   5.81901\n   [5]        1   200-201      * |   4.14720\n   ...      ...       ...    ... .       ...\n  [36]        1   898-899      * |   6.55006\n  [37]        1   922-923      * |   6.46796\n  [38]        1   956-957      * |   4.93079\n  [39]        1   957-958      * |   4.34292\n  [40]        1   966-967      * |   4.53976\n  -------\n  seqinfo: 1 sequence from an unspecified genome\n\ny\n\nGRanges object with 3 ranges and 1 metadata column:\n      seqnames    ranges strand |          id\n         &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;character&gt;\n  [1]        1   101-300      * |           a\n  [2]        1   451-650      * |           b\n  [3]        1  801-1000      * |           c\n  -------\n  seqinfo: 1 sequence from an unspecified genome; no seqlengths\n\n\n\n\nx |&gt; join_overlap_inner(y)\n\nGRanges object with 30 ranges and 2 metadata columns:\n       seqnames    ranges strand |     score          id\n          &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;numeric&gt; &lt;character&gt;\n   [1]        1   114-115      * |   4.88780           a\n   [2]        1   129-130      * |   4.40817           a\n   [3]        1   154-155      * |   5.18773           a\n   [4]        1   195-196      * |   5.81901           a\n   [5]        1   200-201      * |   4.14720           a\n   ...      ...       ...    ... .       ...         ...\n  [26]        1   898-899      * |   6.55006           c\n  [27]        1   922-923      * |   6.46796           c\n  [28]        1   956-957      * |   4.93079           c\n  [29]        1   957-958      * |   4.34292           c\n  [30]        1   966-967      * |   4.53976           c\n  -------\n  seqinfo: 1 sequence from an unspecified genome\n\n\nMany options, directed, within, maxgap, minoverlap, etc.\n\n# chaining operations\nx |&gt;\n  filter(score &gt; 3.5) |&gt;\n  join_overlap_inner(y) |&gt;\n  group_by(id) |&gt;\n  summarize(ave_score = mean(score), n = n())\n\nDataFrame with 3 rows and 3 columns\n           id ave_score         n\n  &lt;character&gt; &lt;numeric&gt; &lt;integer&gt;\n1           a   5.00465        10\n2           b   5.43353        11\n3           c   5.45538         7\n\n\n\n# pipe to plot\nx |&gt;\n  filter(score &gt; 3.5) |&gt;\n  join_overlap_inner(y) |&gt;\n  as_tibble() |&gt;\n  ggplot(aes(x = id, y = score)) + \n  geom_violin() + geom_jitter(width=.1)\n\n\n\n\n\n# many convenience functions\ny |&gt; \n  anchor_5p() |&gt; # 5', 3', start, end, center\n  mutate(width=2) |&gt;\n  join_nearest(x, distance=TRUE)\n\nGRanges object with 3 ranges and 3 metadata columns:\n      seqnames    ranges strand |          id     score  distance\n         &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;character&gt; &lt;numeric&gt; &lt;integer&gt;\n  [1]        1   101-102      * |           a   4.88780        11\n  [2]        1   451-452      * |           b   3.99047         1\n  [3]        1   801-802      * |           c   6.49877        21\n  -------\n  seqinfo: 1 sequence from an unspecified genome; no seqlengths"
  },
  {
    "objectID": "tidy-intro-talk.html#nullranges",
    "href": "tidy-intro-talk.html#nullranges",
    "title": "Tidy Intro Talk",
    "section": "nullranges",
    "text": "nullranges\nWe developed a package nullranges, as a modular tool to assist with making genomic comparisons. It doesn’t do enrichment analysis but provides null genomic range sets for investigating various hypotheses."
  },
  {
    "objectID": "tidy-intro-talk.html#bootstrapping-ranges",
    "href": "tidy-intro-talk.html#bootstrapping-ranges",
    "title": "Tidy Intro Talk",
    "section": "Bootstrapping ranges",
    "text": "Bootstrapping ranges\nStatistical papers from the ENCODE project noted that block bootstrapping genomic data preserves important spatial patterns (Bickel et al. 2010).\n\n\nlibrary(nullranges)\nboot &lt;- bootRanges(x, blockLength=10, R=20)\n# keep track of bootstrap iteration, gives boot dist'n\nboot |&gt;\n  join_overlap_inner(y) |&gt;\n  group_by(iter, id) |&gt;\n  summarize(n_overlaps = n())\n\nDataFrame with 60 rows and 3 columns\n     iter          id n_overlaps\n    &lt;Rle&gt; &lt;character&gt;  &lt;integer&gt;\n1       1           a          4\n2       1           b         10\n3       1           c          4\n4       2           a         11\n5       2           b         10\n...   ...         ...        ...\n56     19           b         18\n57     19           c         11\n58     20           a         10\n59     20           b         15\n60     20           c          8\n\n\n\nboot |&gt;\n  join_overlap_inner(y) |&gt;\n  group_by(iter, id) |&gt;\n  summarize(n_overlaps = n()) |&gt;\n  as_tibble() |&gt;\n  ggplot(aes(x = id, y = n_overlaps)) + \n  geom_boxplot()"
  },
  {
    "objectID": "tidy-intro-talk.html#matching-ranges",
    "href": "tidy-intro-talk.html#matching-ranges",
    "title": "Tidy Intro Talk",
    "section": "Matching ranges",
    "text": "Matching ranges\nMatching on covariates from a large pool allows for more focused hypothesis testing.\n\n\nxprime &lt;- x |&gt;\n  filter(score &gt; 5) |&gt;\n  mutate(score = rnorm(n(), mean = score, sd = .5))\nm &lt;- matchRanges(focal = xprime, pool = x, covar = ~score)\nplotCovariate(m)\n\n\n\n\n\ncombined &lt;- bind_ranges(\n  focal = xprime,\n  matching = matched(m),\n  pool = x,\n  .id = \"origin\"\n)\ncombined\n\nGRanges object with 82 ranges and 2 metadata columns:\n       seqnames    ranges strand |     score origin\n          &lt;Rle&gt; &lt;IRanges&gt;  &lt;Rle&gt; | &lt;numeric&gt;  &lt;Rle&gt;\n   [1]        1   154-155      * |   5.91030  focal\n   [2]        1   195-196      * |   6.95693  focal\n   [3]        1   280-281      * |   6.62346  focal\n   [4]        1   282-283      * |   5.20914  focal\n   [5]        1   303-304      * |   7.47406  focal\n   ...      ...       ...    ... .       ...    ...\n  [78]        1   898-899      * |   6.55006   pool\n  [79]        1   922-923      * |   6.46796   pool\n  [80]        1   956-957      * |   4.93079   pool\n  [81]        1   957-958      * |   4.34292   pool\n  [82]        1   966-967      * |   4.53976   pool\n  -------\n  seqinfo: 1 sequence from an unspecified genome\n\n# now use the different sets for computation:\ncombined |&gt; \n  join_overlap_inner(y) |&gt;\n  group_by(id, origin) |&gt;\n  summarize(ave_score = mean(score))\n\nDataFrame with 9 rows and 3 columns\n           id   origin ave_score\n  &lt;character&gt;    &lt;Rle&gt; &lt;numeric&gt;\n1           a    focal   6.17495\n2           a matching   5.54412\n3           a     pool   5.00465\n4           b    focal   5.79665\n5           b matching   6.07625\n6           b     pool   5.25055\n7           c    focal   6.32536\n8           c matching   5.82463\n9           c     pool   5.14840\n\n\n\ncombined |&gt; \n  join_overlap_inner(y) |&gt;\n  group_by(id, origin) |&gt;\n  summarize(ave_score = mean(score), sd = sd(score)) |&gt;\n  as_tibble() |&gt;\n  ggplot(aes(origin, ave_score, \n             ymin=ave_score-2*sd, ymax=ave_score+2*sd)) + \n  geom_pointrange() +\n  facet_wrap(~id, labeller = label_both)\n\n\n\n\nThese are published as Application Notes:\n\nbootRanges\nmatchRanges"
  },
  {
    "objectID": "tidy-intro-talk.html#what-has-been-implemented",
    "href": "tidy-intro-talk.html#what-has-been-implemented",
    "title": "Tidy Intro Talk",
    "section": "What has been implemented",
    "text": "What has been implemented\n\nMatrix-shaped objects (SE, SCE)\nRanges\nInteractions\nCytometry\nSpatial\nmore to come…"
  },
  {
    "objectID": "tidy-intro-talk.html#limitations",
    "href": "tidy-intro-talk.html#limitations",
    "title": "Tidy Intro Talk",
    "section": "Limitations",
    "text": "Limitations\n\npackage code and non-standard evaluation\noptimized code, e.g. matrix operations\n\n\nlibrary(tidySummarizedExperiment)\nse_test\n\n# A SummarizedExperiment-tibble abstraction: 100,000 × 4\n# Features=1000 | Samples=100 | Assays=counts\n   .feature .sample counts     x\n   &lt;chr&gt;    &lt;chr&gt;    &lt;int&gt; &lt;int&gt;\n 1 1        1           94     1\n 2 2        1           79     2\n 3 3        1           96     3\n 4 4        1           94     4\n 5 5        1           99     5\n 6 6        1          130     6\n 7 7        1          115     7\n 8 8        1          100     8\n 9 9        1           91     9\n10 10       1           85    10\n# ℹ 40 more rows\n\n# looping over 1000 genes, averaging 100 samples\nse_test |&gt;\n  group_by(.feature) |&gt;\n  summarize(ave_count = mean(counts))\n\ntidySummarizedExperiment says: A data frame is returned for independent data analysis.\n\n\n# A tibble: 1,000 × 2\n   .feature ave_count\n   &lt;chr&gt;        &lt;dbl&gt;\n 1 1             99.3\n 2 10           102. \n 3 100          101. \n 4 1000          99.8\n 5 101          101. \n 6 102          100. \n 7 103          101. \n 8 104          102. \n 9 105           99.4\n10 106          100. \n# ℹ 990 more rows\n\n\n\nlibrary(microbenchmark)\nmb &lt;- microbenchmark(tidy = tidy_version(se_test), \n                     baseR = rowMeans(assay(se_test)), times = 5)\n\nWarning in microbenchmark(tidy = tidy_version(se_test), baseR = rowMeans(assay(se_test)), : less\naccurate nanosecond times to avoid potential integer overflows\n\nprint(mb, unit=\"s\", signif=2)\n\nUnit: seconds\n  expr    min     lq   mean median     uq    max neval\n  tidy 0.0440 0.0470 0.0540  0.056 0.0580 0.0640     5\n baseR 0.0017 0.0017 0.0023  0.002 0.0027 0.0032     5"
  },
  {
    "objectID": "tidy-intro-talk.html#outro",
    "href": "tidy-intro-talk.html#outro",
    "title": "Tidy Intro Talk",
    "section": "Outro",
    "text": "Outro\nRecommend genomic data analysts are always checking:\n\nmain contributions to variance (e.g. PCA, see plotPCA for bulk and OSCA for sc)\ncolumn and row densities (tidySE allows directly plotting geom_density of rows/columns, or geom_violin)\nknown positive features, feature-level plots (filter to feature, pipe to geom_point etc.)\n\nIf you’re interested in more complicated use cases of tidyomics see this online book:\n\nTidy ranges tutorial"
  },
  {
    "objectID": "tidy-intro-talk.html#contributors",
    "href": "tidy-intro-talk.html#contributors",
    "title": "Tidy Intro Talk",
    "section": "Contributors",
    "text": "Contributors\n\nStefano Mangiola (tidyomics leadership, tidy expression, single cell, spatial)\nEric Davis, Wancen Mu, Doug Phanstiel (nullranges)\nStuart Lee, Michael Lawrence, Di Cook (plyranges)\n\nAnd tidyomics developers: William Hutchison, Timothy Keyes, Helena Crowell, Jacques Serizay, Charlotte Soneson, Eric Davis, Noriaki Sato, Lambda Moses, Boyd Tarlinton, Abdullah Nahid, Miha Kosmac, Quentin Clayssen, Victor Yuan, Wancen Mu, Ji-Eun Park, Izabela Mamede, Min Hyung Ryu, Pierre-Paul Axisa, Paulina Paiz, Chi-Lam Poon, Ming Tang"
  },
  {
    "objectID": "tidy-intro-talk.html#funding",
    "href": "tidy-intro-talk.html#funding",
    "title": "Tidy Intro Talk",
    "section": "Funding",
    "text": "Funding\ntidyomics project funded by an Essential Open Source Software award from CZI and Wellcome Trust"
  }
]